generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  name          String
  email         String             @unique
  phone         String?
  city          String
  state         String
  country       String
  role          Role               // Donor, Patient, Volunteer, Admin
  password      String
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  donor         Donor?
  volunteer     Volunteer?
  patient       Patient?
  badges        Badge[]
  leaderboard   LeaderboardEntry[]
  bloodRequests BloodRequest[]     @relation("UserBloodRequests")
  engagements   Engagement[]
}

enum Role {
  DONOR
  PATIENT
  VOLUNTEER
  ADMIN
}

model Donor {
  id                 Int        @id @default(autoincrement())
  user               User       @relation(fields: [user_id], references: [id])
  user_id            Int        @unique
  blood_type         String
  last_donation_date DateTime?
  total_donations    Int        @default(0)
  latitude           Float?
  longitude          Float?
  donations          Donation[]
}

model Patient {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [user_id], references: [id])
  user_id         Int       @unique
  medical_history String?
  blood_group     String
  age             Int?
  gender          String?
}

model Volunteer {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    Int       @unique
  joined_at  DateTime? @default(now())
  activities String[]
  assigned_region String? // to track coordination areas
}

model Donation {
  id         Int      @id @default(autoincrement())
  donor      Donor    @relation(fields: [donor_id], references: [id])
  donor_id   Int
  quantity   Int
  date       DateTime
  blood_type String
  city String
  state String
  district String
  latitude   Float?
  longitude  Float?
  notes      String?
}

model BloodRequest {
  id           Int       @id @default(autoincrement())
  requester    User      @relation("UserBloodRequests", fields: [requester_id], references: [id])
  requester_id Int
  blood_type   String
  urgency      String     // Normal, Urgent, Critical
  status       String     // Pending, Fulfilled, Cancelled
  requested_at DateTime?  @default(now())
  fulfilled_at DateTime?
  latitude     Float?
  longitude    Float?
  matched_donor Int?      // AI routing - link matched donor
}

model Badge {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  user        User      @relation(fields: [user_id], references: [id])
  user_id     Int
  awarded_at  DateTime? @default(now())
}

model LeaderboardEntry {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [user_id], references: [id])
  user_id Int
  rank    Int
  score   Float
}

model Engagement {
  id               Int       @id @default(autoincrement())
  user             User      @relation(fields: [user_id], references: [id])
  user_id          Int
  engagement_score Float
  last_active      DateTime? @default(now())
  activity_log     String[]
}
