generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = "-1"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  name          String
  email         String             @unique
  phone         String?
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  city          String
  country       String
  password      String
  role          Role
  state         String
  badges        Badge[]
  bloodRequests BloodRequest[]     @relation("UserBloodRequests")
  donor         Donor?
  engagements   Engagement[]
  leaderboard   LeaderboardEntry[]
  patient       Patient?
  volunteer     Volunteer?
}

model Donor {
  id              Int      @id @default(autoincrement())
  user_id         Int      @unique
  blood_type      String
  last_donation_date DateTime?
  total_donations Int      @default(0)
  user            User     @relation(fields: [user_id], references: [id])

  donations       Donation[] @relation("DonorDonations")

  location_id Int?
  location    Location?    @relation(fields: [location_id], references: [id])
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String?
  coords    Unsupported("geometry(Point, 4326)")
  createdAt DateTime @default(now())

  donors        Donor[]
  donations     Donation[]
  bloodRequests BloodRequest[]
}

model Patient {
  id              Int     @id @default(autoincrement())
  user_id         Int     @unique
  medical_history String?
  blood_group     String
  age             Int?
  gender          String?
  user            User    @relation(fields: [user_id], references: [id])
}

model Volunteer {
  id              Int       @id @default(autoincrement())
  user_id         Int       @unique
  joined_at       DateTime? @default(now())
  activities      String[]
  assigned_region String?
  user            User      @relation(fields: [user_id], references: [id])
}

model Donation {
  id         Int      @id @default(autoincrement())
  donor_id   Int
  date       DateTime
  blood_type String
  notes      String?
  city       String
  district   String
  state      String
  quantity   Int
  donor      Donor    @relation("DonorDonations", fields: [donor_id], references: [id])

  location_id Int?
  location    Location? @relation(fields: [location_id], references: [id])
}

model BloodRequest {
  id            Int       @id @default(autoincrement())
  requester_id  Int
  blood_type    String
  status        String
  requested_at  DateTime? @default(now())
  fulfilled_at  DateTime?
  matched_donor Int?
  urgency       String
  requester     User      @relation("UserBloodRequests", fields: [requester_id], references: [id])

  location_id Int?
  location    Location?   @relation(fields: [location_id], references: [id])
}

model Badge {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  user_id     Int
  awarded_at  DateTime? @default(now())
  user        User      @relation(fields: [user_id], references: [id])
}

model LeaderboardEntry {
  id      Int   @id @default(autoincrement())
  user_id Int
  rank    Int
  score   Float
  user    User  @relation(fields: [user_id], references: [id])
}

model Engagement {
  id               Int       @id @default(autoincrement())
  user_id          Int
  engagement_score Float
  last_active      DateTime? @default(now())
  activity_log     String[]
  user             User      @relation(fields: [user_id], references: [id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum Role {
  DONOR
  PATIENT
  VOLUNTEER
  ADMIN
}
